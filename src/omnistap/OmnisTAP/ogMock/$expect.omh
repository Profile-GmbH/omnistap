#Add parameters
Calculate llParameters as ilMockMethods.Parameters

For llParameters.$line from 1 to llParameters.$linecount step 1
	If llParameters.ObjType=kFieldreference
		#Assume the type of the passed variable for want
		Calculate lrWant as llParameters.Want
		Do lrWant.$cols.$remove(lrWant.$cols.Want)
		
		Switch [llParameters.Name].$type
			Case kList,kRow,kObjectref,kItemref,kObject
				Do lrWant.$cols.$add("Want",[llParameters.Name].$type)
			Default
				Do lrWant.$cols.$add("Want",[llParameters.Name].$type,[llParameters.Name].$subtype,[llParameters.Name].$sublen)
		End Switch
		
		Calculate llParameters.Want as lrWant
		
		#Assume the type of the passed variable for have
		Calculate lrHave as lrWant
		Calculate lrHave.$cols.Want.$name as "Have"
		Calculate llParameters.Have as lrHave
		
		#Assume the type of the passed variable for the return
		#By default, return what we expect so we don't change the value
		#We can set this separately using $paramater(1).$return_[type]
		Calculate lrReturn as lrWant
		Calculate lrReturn.$cols.Want.$name as "Return"
		Calculate lrReturn.Return as [llParameters.Name]
		Calculate llParameters.Return as lrReturn
	End If
	
	If llParameters.ObjType=kItemref
		Calculate llParameters.Want.Want as pick(isclear([llParameters.Name]),[llParameters.Name].$fullname,"")
	Else
		Calculate llParameters.Want.Want as [llParameters.Name]
	End If
	
	#Build signature
	If not(isclear(lcParameterSignature))
		Calculate lcParameterSignature as con(lcParameterSignature,",")
	End If
	
	If isclear(llParameters.Want.Want)
		Calculate lcParameterSignature as con(lcParameterSignature,"CLEAR")
	Else If llParameters.Want.Want.$colcount=0&llParameters.ObjType=kRow
		Calculate llParameters.Want.Want as #NULL
	Else
		Calculate lcParameterSignature as con(lcParameterSignature,llParameters.Want.Want)
	End If
End For

Calculate llCalls as ilMockMethods.Calls

If ibExpectedSpecificCall
	Calculate llCalls.ParameterSignature as lcParameterSignature
	Calculate llCalls.Parameters as llParameters
Else
	Do llCalls.$search($ref.ParameterSignature=lcParameterSignature,1,0,0,0) Returns llCalls.$line
	If llCalls.$line=0
		Do llCalls.$add()
		Calculate llCalls.$line as llCalls.$linecount
		Calculate llCalls.ParameterSignature as lcParameterSignature
		Calculate llCalls.Parameters as llParameters
	End If
End If

Calculate ilMockMethods.Calls as llCalls

Quit method $cinst.$objref