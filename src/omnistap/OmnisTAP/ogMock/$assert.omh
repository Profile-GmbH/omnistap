#Assert methods
For ilMockMethods.$line from 1 to ilMockMethods.$linecount step 1
	Calculate lnCallCountWant as pick(isclear(ilMockMethods.Calls.$linecount),ilMockMethods.Calls.$linecount,0)
	
	Switch lnCallCountWant
		Case 0
			Calculate lcTestMessage as con("We don't call ",ilMockMethods.MethodName)
		Case 1
			Calculate lcTestMessage as con("We call ",ilMockMethods.MethodName," once")
		Case 2
			Calculate lcTestMessage as con("We call ",ilMockMethods.MethodName," twice")
		Default
			Calculate lcTestMessage as con("We call ",ilMockMethods.MethodName," ",lnCallCountWant," times")
	End Switch
	
	If not(isclear(ilMockMethods.Reason))
		Calculate lcTestMessage as con(lcTestMessage," because ",ilMockMethods.Reason)
	End If
	
	#Log the stack for un-expected calls
	Calculate llExtraCalls as ilMockMethods.ExtraCalls
	For llExtraCalls.$line from 1 to llExtraCalls.$linecount step 1
		Calculate lcTestMessage as con(lcTestMessage,kCr,"Stack for extra call ",ilMockMethods.Calls.$linecount+llExtraCalls.$line," to ",ilMockMethods.MethodName,":")
		
		Calculate llStack as llExtraCalls.Stack
		For llStack.$line from 1 to llStack.$linecount step 1
			Do $cinst.$_getStackDescription(llStack.0) Returns lcStackDescription
			Calculate lcTestMessage as con(lcTestMessage,kCr,llStack.$line,"--> ",lcStackDescription)
		End For
	End For
	
	Do ioTAP.$is_number(ilMockMethods.Callcount,lnCallCountWant,lcTestMessage)
	
	Calculate ilMockMethods.Callcount as 0
	Calculate ilMockMethods.Reason as ""
	
	#Assert parameters for each call to the method
	Calculate llCalls as ilMockMethods.Calls
	
	For llCalls.$line from 1 to llCalls.$linecount step 1
		For llCalls.Parameters.$line from 1 to llCalls.Parameters.$linecount step 1
			If isnull(llCalls.Parameters.Have.Have)&isnull(llCalls.Parameters.Want.Want)
				Jump to start of loop
			End If
			
			#Ignore $files.$vals. Omnis returns this as the $fullname of a null item reference
			If right(llCalls.Parameters.Have.Have,13)=".$files.$vals"&right(llCalls.Parameters.Want.Want,13)=".$files.$vals"
				Jump to start of loop
			End If
			
			If llCalls.Parameters.ObjType=kFieldreference
				Do $cinst.$_getAssertionForType(llCalls.Parameters.Want.Want.$type) Returns lcAssertion
			Else
				Do $cinst.$_getAssertionForType(llCalls.Parameters.ObjType) Returns lcAssertion
			End If
			
			Do ioTAP.[lcAssertion](llCalls.Parameters.Have.Have,llCalls.Parameters.Want.Want,con(llCalls.Parameters.Name," for call ",llCalls.$line," to ",ilMockMethods.MethodName," is correct"))
		End For
	End For
End For

Calculate ilMockMethods.$line as 0