# Capture the timestamp we start mocking
# We'll use this to clear any existing mocking classes that were created prior to this test run
If isclear(idMockingStart)
	Calculate idMockingStart as #D
End If

Do sys(192) Returns llMethodStack

# Verify the class to mock exists
If isclear(pirClass)
	Calculate lcClassName as llMethodStack.2.linetext
	Calculate lcClassName as mid(lcClassName,pos("(",lcClassName)+1)
	Calculate lcClassName as mid(lcClassName,1,pos(")",lcClassName)-1)
	
	Do $cinst.ioTAP.$fail(con("Cannot mock ",lcClassName," as it does not exist"))
	Quit method #NULL
End If

# Calculate the mock class name
Calculate lcTestMethodName as $cinst.$getCurrentTest()
Calculate lcTestClassName as $cinst.$getDisplayName()
Calculate lcMockClassName as con(pirClass().$name,"_TestMock_",lcTestClassName,"_",lcTestMethodName)

# Delete the class if it exists
Set reference lirLibrary to pirClass.$lib
Do lirLibrary.$classes.$findname(lcMockClassName) Returns lirMockClass

If not(isnull(lirMockClass))&lirMockClass.$createdate<idMockingStart&$cinst.$getManager().$isRunningFromCLI()=kFalse
	Do lirLibrary.$classes.$remove(lirLibrary.$classes.$findname(lcMockClassName))
	Set reference lirMockClass to #NULL
End If

# Create the mock class if need be
If isnull(lirMockClass)
	If pirClass.$classtype=kReport
		Do lirLibrary.$reports.$add(lcMockClassName) Returns lirMockClass
		Calculate lirMockClass.$classdata as pirClass.$classdata
		
		# Remove methods so we get the inherited ones
		Do lirMockClass.$methods().$first() Returns lirMethod
		While not(isnull(lirMethod()))
			Do lirMockClass.$methods.$remove(lirMethod())
			Do lirMockClass.$methods().$first() Returns lirMethod
		End While
		
		# Remove instance variables so the inherited methods use inherited variables
		Do lirMockClass.$ivardefs().$first() Returns lirInstanceVariableDefinition
		While not(isnull(lirInstanceVariableDefinition()))
			Do lirMockClass.$ivardefs.$remove(lirInstanceVariableDefinition())
			Do lirMockClass.$ivardefs().$first() Returns lirInstanceVariableDefinition
		End While
		
		Calculate lirMockClass.$superclass as pirClass().$name
	Else
		Do pirClass.$makesubclass(lcMockClassName) Returns lirMockClass
	End If
	
	Calculate lirMockClass.$external as kTrue
	
	# Add instance variables
	Do lirMockClass.$ivardefs.$add("_iorMock",kObjectref) Returns lirInstanceVariableDefinition
	
	# Override $construct
	Do lirMockClass.$methods.$add("$construct") Returns lirConstruct
	Do lirConstruct.$lvardefs.$add("porMock",kObjectref,#NULL,0,kTrue)
	Do lirConstruct.$methodlines.$add("Calculate _iorMock as porMock")
	Do lirConstruct.$methodlines.$add("Do _iorMock.$setMockInstance($cinst())")
	Do lirConstruct.$methodlines.$add("Do inherited")
	
	# Override $destruct
	Do lirMockClass.$methods.$add("$destruct")
	
	# Add mock
	Do lirMockClass.$methods.$add("$mock") Returns lirMockMethod
	Do lirMockMethod.$lvardefs.$add("pcMethodName",kCharacter,kSimplechar,100000000,kTrue)
	Do lirMockMethod.$methodlines.$add("Quit method _iorMock.$mock(pcMethodName)")
	
	# Add new
	Do lirMockClass.$methods.$add("$new") Returns lirMockMethod
	Do lirMockMethod.$lvardefs.$add("pfoObject",kFieldreference,,,kTrue)
	Do lirMockMethod.$methodlines.$add("Do _iorMock.$new(pfoObject)")
	
	# Add assert
	Do lirMockClass.$methods.$add("$assert") Returns lirMockMethod
	Do lirMockMethod.$methodlines.$add("Do _iorMock.$assert()")
	
	# Add reset
	Do lirMockClass.$methods.$add("$reset") Returns lirMockMethod
	Do lirMockMethod.$methodlines.$add("Quit method _iorMock.$reset()")
End If

# Get a new mock class and register it so the test manager can remove it at the end of the run
Do $objects.ogMock.$newref(_iorTAPManager,ioTAP) Returns lorMock
Do lorMock.$setMockClass(lirMockClass)

# Instantiate the class and return it
If lirMockClass.$classtype=kObjectclass
	Quit method lirMockClass.$newref(lorMock)
Else If lirMockClass.$classtype=kReport
	Quit method lirMockClass.$open("*",lorMock)
Else If lirMockClass.$classtype=kTable
	Do pfrMockInstance.$definefromsqlclass(lirMockClass)
	Calculate pfrMockInstance._iorMock as lorMock
	Do lorMock.$setMockInstance(pfrMockInstance.$ref)
End If

Quit method lirMockClass.$open("*",kWindowCenter,lorMock)